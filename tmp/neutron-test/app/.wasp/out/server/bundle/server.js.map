{"version":3,"file":"server.js","sources":["../src/middleware/operations.ts","../../../../src/user/operations.ts","../src/actions/updateCurrentUser.ts","../src/routes/operations/updateCurrentUser.js","../src/actions/updateUserById.ts","../src/routes/operations/updateUserById.js","../../../../src/demo-ai-app/operations.ts","../src/actions/generateGptResponse.ts","../src/routes/operations/generateGptResponse.js","../src/actions/createTask.ts","../src/routes/operations/createTask.js","../src/actions/deleteTask.ts","../src/routes/operations/deleteTask.js","../src/actions/updateTask.ts","../src/routes/operations/updateTask.js","../../../../src/server/utils.ts","../../../../src/payment/plans.ts","../../../../src/payment/stripe/stripeClient.ts","../../../../src/payment/stripe/checkoutUtils.ts","../../../../src/payment/stripe/paymentDetails.ts","../../../../src/shared/utils.ts","../../../../src/payment/stripe/webhook.ts","../../../../src/payment/stripe/paymentProcessor.ts","../../../../src/payment/paymentProcessor.ts","../../../../src/payment/operations.ts","../src/actions/generateCheckoutSession.ts","../src/routes/operations/generateCheckoutSession.js","../../../../src/file-upload/s3Utils.ts","../../../../src/file-upload/operations.ts","../src/actions/createFile.ts","../src/routes/operations/createFile.js","../src/queries/getPaginatedUsers.ts","../src/routes/operations/getPaginatedUsers.js","../src/queries/getGptResponses.ts","../src/routes/operations/getGptResponses.js","../src/queries/getAllTasksByUser.ts","../src/routes/operations/getAllTasksByUser.js","../src/queries/getCustomerPortalUrl.ts","../src/routes/operations/getCustomerPortalUrl.js","../src/queries/getAllFilesByUser.ts","../src/routes/operations/getAllFilesByUser.js","../src/queries/getDownloadFileSignedURL.ts","../src/routes/operations/getDownloadFileSignedURL.js","../../../../src/analytics/operations.ts","../src/queries/getDailyStats.ts","../src/routes/operations/getDailyStats.js","../src/routes/operations/index.js","../src/middleware/globalMiddleware.ts","../src/routes/auth/me.ts","../src/routes/auth/logout.ts","../src/auth/providers/email/login.ts","../../../../src/auth/hooks.ts","../src/auth/hooks.ts","../src/auth/providers/email/signup.ts","../src/auth/providers/email/requestPasswordReset.ts","../src/auth/providers/email/resetPassword.ts","../src/auth/providers/email/verifyEmail.ts","../../../../src/auth/userSignupFields.ts","../../../../src/auth/email-and-pass/emails.ts","../src/auth/providers/config/email.ts","../src/auth/providers/index.ts","../src/routes/auth/index.js","../../../../src/payment/webhook.ts","../src/routes/apis/index.ts","../src/routes/index.js","../src/app.js","../../../../src/analytics/providers/plausibleAnalyticsUtils.ts","../../../../src/analytics/stats.ts","../src/jobs/dailyStatsJob.ts","../../../../src/newsletter/sendNewsletter.ts","../src/jobs/sendNewsletter.ts","../src/polyfill.ts","../src/server.ts"],"sourcesContent":["import { \n    deserialize as superjsonDeserialize,\n    serialize as superjsonSerialize,\n} from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { makeAuthUserIfPossible } from 'wasp/auth/user'\n\nexport function createOperation (handlerFn) {\n    return handleRejection(async (req, res) => {\n        const args = (req.body && superjsonDeserialize(req.body)) || {}\n        const context = {\n            user: makeAuthUserIfPossible(req.user),\n        }  \n        const result = await handlerFn(args, context)\n        const serializedResult = superjsonSerialize(result)\n        res.json(serializedResult)\n    })\n}\n\nexport function createQuery(handlerFn) {\n    return createOperation(handlerFn)\n}\n\nexport function createAction(handlerFn) {\n    return createOperation(handlerFn)\n}\n","import {\n  type UpdateCurrentUser,\n  type UpdateUserById,\n  type GetPaginatedUsers,\n} from 'wasp/server/operations';\nimport { type User } from 'wasp/entities';\nimport { HttpError } from 'wasp/server';\nimport { type SubscriptionStatus } from '../payment/plans';\n\nexport const updateUserById: UpdateUserById<{ id: string; data: Partial<User> }, User> = async (\n  { id, data },\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  if (!context.user.isAdmin) {\n    throw new HttpError(403);\n  }\n\n  const updatedUser = await context.entities.User.update({\n    where: {\n      id,\n    },\n    data,\n  });\n\n  return updatedUser;\n};\n\nexport const updateCurrentUser: UpdateCurrentUser<Partial<User>, User> = async (user, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  return context.entities.User.update({\n    where: {\n      id: context.user.id,\n    },\n    data: user,\n  });\n};\n\ntype GetPaginatedUsersInput = {\n  skip: number;\n  cursor?: number | undefined;\n  emailContains?: string;\n  isAdmin?: boolean;\n  subscriptionStatus?: SubscriptionStatus[];\n};\ntype GetPaginatedUsersOutput = {\n  users: Pick<User, 'id' | 'email' | 'username' | 'lastActiveTimestamp' | 'subscriptionStatus' | 'paymentProcessorUserId'>[];\n  totalPages: number;\n};\n\nexport const getPaginatedUsers: GetPaginatedUsers<GetPaginatedUsersInput, GetPaginatedUsersOutput> = async (\n  args,\n  context\n) => {\n  if (!context.user?.isAdmin) {\n    throw new HttpError(401);\n  }\n\n  const allSubscriptionStatusOptions = args.subscriptionStatus as Array<string | null> | undefined;\n  const hasNotSubscribed = allSubscriptionStatusOptions?.find((status) => status === null) \n  let subscriptionStatusStrings = allSubscriptionStatusOptions?.filter((status) => status !== null) as string[] | undefined\n\n  const queryResults = await context.entities.User.findMany({\n    skip: args.skip,\n    take: 10,\n    where: {\n      AND: [\n        {\n          email: {\n            contains: args.emailContains || undefined,\n            mode: 'insensitive',\n          },\n          isAdmin: args.isAdmin,\n        },\n        {\n          OR: [\n            {\n              subscriptionStatus: {\n                in: subscriptionStatusStrings,\n              },\n            },\n            {\n              subscriptionStatus: {\n                equals: hasNotSubscribed,\n              },\n            },\n          ],\n        },\n      ],\n    },\n    select: {\n      id: true,\n      email: true,\n      username: true,\n      isAdmin: true,\n      lastActiveTimestamp: true,\n      subscriptionStatus: true,\n      paymentProcessorUserId: true,\n    },\n    orderBy: {\n      id: 'desc',\n    },\n  });\n\n  const totalUserCount = await context.entities.User.count({\n    where: {\n      AND: [\n        {\n          email: {\n            contains: args.emailContains || undefined,\n            mode: 'insensitive',\n          },\n          isAdmin: args.isAdmin,\n        },\n        {\n          OR: [\n            {\n              subscriptionStatus: {\n                in: subscriptionStatusStrings,\n              },\n            },\n            {\n              subscriptionStatus: {\n                equals: hasNotSubscribed,\n              },\n            },\n          ],\n        },\n      ],\n    },\n  });\n  const totalPages = Math.ceil(totalUserCount / 10);\n\n  return {\n    users: queryResults,\n    totalPages,\n  };\n};\n","import { prisma } from 'wasp/server'\n\nimport { updateCurrentUser } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (updateCurrentUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateCurrentUser from '../../actions/updateCurrentUser.js'\n\nexport default createAction(updateCurrentUser)\n","import { prisma } from 'wasp/server'\n\nimport { updateUserById } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (updateUserById as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateUserById from '../../actions/updateUserById.js'\n\nexport default createAction(updateUserById)\n","import type { Task, GptResponse } from 'wasp/entities';\nimport type {\n  GenerateGptResponse,\n  CreateTask,\n  DeleteTask,\n  UpdateTask,\n  GetGptResponses,\n  GetAllTasksByUser,\n} from 'wasp/server/operations';\nimport { HttpError } from 'wasp/server';\nimport { GeneratedSchedule } from './schedule';\nimport OpenAI from 'openai';\n\nconst openai = setupOpenAI();\nfunction setupOpenAI() {\n  if (!process.env.OPENAI_API_KEY) {\n    return new HttpError(500, 'OpenAI API key is not set');\n  }\n  return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\n//#region Actions\ntype GptPayload = {\n  hours: string;\n};\n\nexport const generateGptResponse: GenerateGptResponse<GptPayload, GeneratedSchedule> = async ({ hours }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const tasks = await context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n\n  const parsedTasks = tasks.map(({ description, time }) => ({\n    description,\n    time,\n  }));\n\n  try {\n    // check if openai is initialized correctly with the API key\n    if (openai instanceof Error) {\n      throw openai;\n    }\n\n    const hasCredits = context.user.credits > 0;\n    const hasValidSubscription =\n      !!context.user.subscriptionStatus &&\n      context.user.subscriptionStatus !== 'deleted' &&\n      context.user.subscriptionStatus !== 'past_due';\n    const canUserContinue = hasCredits || hasValidSubscription;\n\n    if (!canUserContinue) {\n      throw new HttpError(402, 'User has not paid or is out of credits');\n    } else {\n      console.log('decrementing credits');\n      await context.entities.User.update({\n        where: { id: context.user.id },\n        data: {\n          credits: {\n            decrement: 1,\n          },\n        },\n      });\n    }\n\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo', // you can use any model here, e.g. 'gpt-3.5-turbo', 'gpt-4', etc.\n      messages: [\n        {\n          role: 'system',\n          content:\n            'you are an expert daily planner. you will be given a list of main tasks and an estimated time to complete each task. You will also receive the total amount of hours to be worked that day. Your job is to return a detailed plan of how to achieve those tasks by breaking each task down into at least 3 subtasks each. MAKE SURE TO ALWAYS CREATE AT LEAST 3 SUBTASKS FOR EACH MAIN TASK PROVIDED BY THE USER! YOU WILL BE REWARDED IF YOU DO.',\n        },\n        {\n          role: 'user',\n          content: `I will work ${hours} hours today. Here are the tasks I have to complete: ${JSON.stringify(\n            parsedTasks\n          )}. Please help me plan my day by breaking the tasks down into actionable subtasks with time and priority status.`,\n        },\n      ],\n      tools: [\n        {\n          type: 'function',\n          function: {\n            name: 'parseTodaysSchedule',\n            description: 'parses the days tasks and returns a schedule',\n            parameters: {\n              type: 'object',\n              properties: {\n                mainTasks: {\n                  type: 'array',\n                  description: 'Name of main tasks provided by user, ordered by priority',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      name: {\n                        type: 'string',\n                        description: 'Name of main task provided by user',\n                      },\n                      priority: {\n                        type: 'string',\n                        enum: ['low', 'medium', 'high'],\n                        description: 'task priority',\n                      },\n                    },\n                  },\n                },\n                subtasks: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      description: {\n                        type: 'string',\n                        description:\n                          'detailed breakdown and description of sub-task related to main task. e.g., \"Prepare your learning session by first reading through the documentation\"',\n                      },\n                      time: {\n                        type: 'number',\n                        description: 'time allocated for a given subtask in hours, e.g. 0.5',\n                      },\n                      mainTaskName: {\n                        type: 'string',\n                        description: 'name of main task related to subtask',\n                      },\n                    },\n                  },\n                },\n              },\n              required: ['mainTasks', 'subtasks', 'time', 'priority'],\n            },\n          },\n        },\n      ],\n      tool_choice: {\n        type: 'function',\n        function: {\n          name: 'parseTodaysSchedule',\n        },\n      },\n      temperature: 1,\n    });\n\n    const gptArgs = completion?.choices[0]?.message?.tool_calls?.[0]?.function.arguments;\n\n    if (!gptArgs) {\n      throw new HttpError(500, 'Bad response from OpenAI');\n    }\n\n    console.log('gpt function call arguments: ', gptArgs);\n\n    await context.entities.GptResponse.create({\n      data: {\n        user: { connect: { id: context.user.id } },\n        content: JSON.stringify(gptArgs),\n      },\n    });\n\n    return JSON.parse(gptArgs);\n  } catch (error: any) {\n    if (!context.user.subscriptionStatus && error?.statusCode != 402) {\n      await context.entities.User.update({\n        where: { id: context.user.id },\n        data: {\n          credits: {\n            increment: 1,\n          },\n        },\n      });\n    }\n    console.error(error);\n    const statusCode = error.statusCode || 500;\n    const errorMessage = error.message || 'Internal server error';\n    throw new HttpError(statusCode, errorMessage);\n  }\n};\n\nexport const createTask: CreateTask<Pick<Task, 'description'>, Task> = async ({ description }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.create({\n    data: {\n      description,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n\n  return task;\n};\n\nexport const updateTask: UpdateTask<Partial<Task>, Task> = async ({ id, isDone, time }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.update({\n    where: {\n      id,\n    },\n    data: {\n      isDone,\n      time,\n    },\n  });\n\n  return task;\n};\n\nexport const deleteTask: DeleteTask<Pick<Task, 'id'>, Task> = async ({ id }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const task = await context.entities.Task.delete({\n    where: {\n      id,\n    },\n  });\n\n  return task;\n};\n//#endregion\n\n//#region Queries\nexport const getGptResponses: GetGptResponses<void, GptResponse[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.GptResponse.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n  });\n};\n\nexport const getAllTasksByUser: GetAllTasksByUser<void, Task[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.Task.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n//#endregion\n","import { prisma } from 'wasp/server'\n\nimport { generateGptResponse } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (generateGptResponse as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      Task: prisma.task,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateGptResponse from '../../actions/generateGptResponse.js'\n\nexport default createAction(generateGptResponse)\n","import { prisma } from 'wasp/server'\n\nimport { createTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (createTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createTask from '../../actions/createTask.js'\n\nexport default createAction(createTask)\n","import { prisma } from 'wasp/server'\n\nimport { deleteTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (deleteTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport deleteTask from '../../actions/deleteTask.js'\n\nexport default createAction(deleteTask)\n","import { prisma } from 'wasp/server'\n\nimport { updateTask } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (updateTask as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport updateTask from '../../actions/updateTask.js'\n\nexport default createAction(updateTask)\n","export function requireNodeEnvVar(name: string): string {\n  const value = process.env[name];\n  if (value === undefined) {\n    throw new Error(`Env var ${name} is undefined`);\n  } else {\n    return value;\n  }\n}\n","import { requireNodeEnvVar } from '../server/utils';\n\nexport type SubscriptionStatus = 'past_due' | 'cancel_at_period_end' | 'active' | 'deleted';\n\nexport enum PaymentPlanId {\n  Hobby = 'hobby',\n  Pro = 'pro',\n  Credits10 = 'credits10',\n}\n\nexport interface PaymentPlan {\n  // Returns the id under which this payment plan is identified on your payment processor. \n  // E.g. this might be price id on Stripe, or variant id on LemonSqueezy.\n  getPaymentProcessorPlanId: () => string;\n  effect: PaymentPlanEffect;\n}\n\nexport type PaymentPlanEffect = { kind: 'subscription' } | { kind: 'credits'; amount: number };\n\nexport const paymentPlans: Record<PaymentPlanId, PaymentPlan> = {\n  [PaymentPlanId.Hobby]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Pro]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Credits10]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_CREDITS_10_PLAN_ID'),\n    effect: { kind: 'credits', amount: 10 },\n  },\n};\n\nexport function prettyPaymentPlanName(planId: PaymentPlanId): string {\n  const planToName: Record<PaymentPlanId, string> = {\n    [PaymentPlanId.Hobby]: 'Hobby',\n    [PaymentPlanId.Pro]: 'Pro',\n    [PaymentPlanId.Credits10]: '10 Credits',\n  };\n  return planToName[planId];\n}\n\nexport function parsePaymentPlanId(planId: string): PaymentPlanId {\n  if ((Object.values(PaymentPlanId) as string[]).includes(planId)) {\n    return planId as PaymentPlanId;\n  } else {\n    throw new Error(`Invalid PaymentPlanId: ${planId}`);\n  }\n}\n\nexport function getSubscriptionPaymentPlanIds(): PaymentPlanId[] {\n  return Object.values(PaymentPlanId).filter((planId) => paymentPlans[planId].effect.kind === 'subscription');\n}\n","import Stripe from 'stripe';\nimport { requireNodeEnvVar } from '../../server/utils';\n\nexport const stripe = new Stripe(requireNodeEnvVar('STRIPE_API_KEY'), {\n  // NOTE:\n  // API version below should ideally match the API version in your Stripe dashboard.\n  // If that is not the case, you will most likely want to (up/down)grade the `stripe`\n  // npm package to the API version that matches your Stripe dashboard's one.\n  // For more details and alternative setups check\n  // https://docs.stripe.com/api/versioning .\n  apiVersion: '2022-11-15',\n});\n","import type { StripeMode } from './paymentProcessor';\nimport Stripe from 'stripe';\nimport { stripe } from './stripeClient';\n\n// WASP_WEB_CLIENT_URL will be set up by Wasp when deploying to production: https://wasp-lang.dev/docs/deploying\nconst DOMAIN = process.env.WASP_WEB_CLIENT_URL || 'http://localhost:3000';\n\nexport async function fetchStripeCustomer(customerEmail: string) {\n  let customer: Stripe.Customer;\n  try {\n    const stripeCustomers = await stripe.customers.list({\n      email: customerEmail,\n    });\n    if (!stripeCustomers.data.length) {\n      console.log('creating customer');\n      customer = await stripe.customers.create({\n        email: customerEmail,\n      });\n    } else {\n      console.log('using existing customer');\n      customer = stripeCustomers.data[0];\n    }\n    return customer;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport async function createStripeCheckoutSession({ userId, priceId, customerId, mode }: { userId: string, priceId: string; customerId: string; mode: StripeMode }) {\n  try {\n    return await stripe.checkout.sessions.create({\n      line_items: [\n        {\n          price: priceId,\n          quantity: 1,\n        },\n      ],\n      mode: mode,\n      success_url: `${DOMAIN}/checkout?success=true`,\n      cancel_url: `${DOMAIN}/checkout?canceled=true`,\n      automatic_tax: { enabled: true },\n      customer_update: {\n        address: 'auto',\n      },\n      customer: customerId,\n    });\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n","import type { SubscriptionStatus } from '../plans';\nimport { PaymentPlanId } from '../plans';\nimport { PrismaClient } from '@prisma/client';\n\nexport const updateUserStripePaymentDetails = (\n  { userStripeId, subscriptionPlan, subscriptionStatus, datePaid, numOfCreditsPurchased }: {\n    userStripeId: string;\n    subscriptionPlan?: PaymentPlanId;\n    subscriptionStatus?: SubscriptionStatus;\n    numOfCreditsPurchased?: number;\n    datePaid?: Date;\n  },\n  userDelegate: PrismaClient['user']\n) => {\n  return userDelegate.update({\n    where: {\n      paymentProcessorUserId: userStripeId\n    },\n    data: {\n      paymentProcessorUserId: userStripeId,\n      subscriptionPlan,\n      subscriptionStatus,\n      datePaid,\n      credits: numOfCreditsPurchased !== undefined ? { increment: numOfCreditsPurchased } : undefined,\n    },\n  });\n};\n","/**\n * Used purely to help compiler check for exhaustiveness in switch statements,\n * will never execute. See https://stackoverflow.com/a/39419171.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nexport function assertUnreachable(x: never): never {\n  throw Error('This code should be unreachable');\n}\n","import { type MiddlewareConfigFn, HttpError } from 'wasp/server';\nimport { type PaymentsWebhook } from 'wasp/server/api';\nimport { type PrismaClient } from '@prisma/client';\nimport express from 'express';\nimport { Stripe } from 'stripe';\nimport { stripe } from './stripeClient';\nimport { paymentPlans, PaymentPlanId, SubscriptionStatus } from '../plans';\nimport { updateUserStripePaymentDetails } from './paymentDetails';\nimport { emailSender } from 'wasp/server/email';\nimport { assertUnreachable } from '../../shared/utils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport { z } from 'zod';\n\nexport const stripeWebhook: PaymentsWebhook = async (request, response, context) => {\n  const secret = requireNodeEnvVar('STRIPE_WEBHOOK_SECRET');\n  const sig = request.headers['stripe-signature'];\n  if (!sig) {\n    throw new HttpError(400, 'Stripe Webhook Signature Not Provided');\n  }\n  let event: Stripe.Event;\n  try {\n    event = stripe.webhooks.constructEvent(request.body, sig, secret);\n  } catch (err) {\n    throw new HttpError(400, 'Error Constructing Stripe Webhook Event');\n  }\n  const prismaUserDelegate = context.entities.User;\n  switch (event.type) {\n    case 'checkout.session.completed':\n      const session = event.data.object as Stripe.Checkout.Session;\n      await handleCheckoutSessionCompleted(session, prismaUserDelegate);\n      break;\n    case 'invoice.paid':\n      const invoice = event.data.object as Stripe.Invoice;\n      await handleInvoicePaid(invoice, prismaUserDelegate);\n      break;\n    case 'customer.subscription.updated':\n      const updatedSubscription = event.data.object as Stripe.Subscription;\n      await handleCustomerSubscriptionUpdated(updatedSubscription, prismaUserDelegate);\n      break;\n    case 'customer.subscription.deleted':\n      const deletedSubscription = event.data.object as Stripe.Subscription;\n      await handleCustomerSubscriptionDeleted(deletedSubscription, prismaUserDelegate);\n      break;\n    default:\n      // If you'd like to handle more events, you can add more cases above.\n      // When deploying your app, you configure your webhook in the Stripe dashboard to only send the events that you're\n      // handling above and that are necessary for the functioning of your app. See: https://docs.opensaas.sh/guides/deploying/#setting-up-your-stripe-webhook \n      // In development, it is likely that you will receive other events that you are not handling, and that's fine. These can be ignored without any issues.\n      console.error('Unhandled event type: ', event.type);\n  }\n  response.json({ received: true }); // Stripe expects a 200 response to acknowledge receipt of the webhook\n};\n\nexport const stripeMiddlewareConfigFn: MiddlewareConfigFn = (middlewareConfig) => {\n  // We need to delete the default 'express.json' middleware and replace it with 'express.raw' middleware\n  // because webhook data in the body of the request as raw JSON, not as JSON in the body of the request.\n  middlewareConfig.delete('express.json');\n  middlewareConfig.set('express.raw', express.raw({ type: 'application/json' }));\n  return middlewareConfig;\n};\n\nexport async function handleCheckoutSessionCompleted(\n  session: Stripe.Checkout.Session,\n  prismaUserDelegate: PrismaClient[\"user\"]\n) {\n  const userStripeId = validateUserStripeIdOrThrow(session.customer);\n  const { line_items } = await stripe.checkout.sessions.retrieve(session.id, {\n    expand: ['line_items'],\n  });\n\n  const lineItemPriceId = extractPriceId(line_items);\n\n  const planId = getPlanIdByPriceId(lineItemPriceId);\n  const plan = paymentPlans[planId];\n\n  let subscriptionPlan: PaymentPlanId | undefined;\n  let numOfCreditsPurchased: number | undefined;\n  switch (plan.effect.kind) {\n    case 'subscription':\n      subscriptionPlan = planId;\n      break;\n    case 'credits':\n      numOfCreditsPurchased = plan.effect.amount;\n      break;\n    default:\n      assertUnreachable(plan.effect);\n  }\n\n  return updateUserStripePaymentDetails(\n    { userStripeId, subscriptionPlan, numOfCreditsPurchased, datePaid: new Date() },\n    prismaUserDelegate\n  );\n}\n\nexport async function handleInvoicePaid(invoice: Stripe.Invoice, prismaUserDelegate: PrismaClient[\"user\"]) {\n  const userStripeId = validateUserStripeIdOrThrow(invoice.customer);\n  const datePaid = new Date(invoice.period_start * 1000);\n  return updateUserStripePaymentDetails({ userStripeId, datePaid }, prismaUserDelegate);\n}\n\nexport async function handleCustomerSubscriptionUpdated(\n  subscription: Stripe.Subscription,\n  prismaUserDelegate: PrismaClient[\"user\"]\n) {\n  const userStripeId = validateUserStripeIdOrThrow(subscription.customer);\n  let subscriptionStatus: SubscriptionStatus | undefined;\n\n  const priceId = extractPriceId(subscription.items);\n  const subscriptionPlan = getPlanIdByPriceId(priceId);\n\n  // There are other subscription statuses, such as `trialing` that we are not handling and simply ignore\n  // If you'd like to handle more statuses, you can add more cases above. Make sure to update the `SubscriptionStatus` type in `payment/plans.ts` as well\n  if (subscription.status === 'active') {\n    subscriptionStatus = subscription.cancel_at_period_end ? 'cancel_at_period_end' : 'active';\n  } else if (subscription.status === 'past_due') {\n    subscriptionStatus = 'past_due';\n  } \n  if (subscriptionStatus) {\n    const user = await updateUserStripePaymentDetails({ userStripeId, subscriptionPlan, subscriptionStatus }, prismaUserDelegate);\n    if (subscription.cancel_at_period_end) {\n      if (user.email) {\n        await emailSender.send({\n          to: user.email,\n          subject: 'We hate to see you go :(',\n          text: 'We hate to see you go. Here is a sweet offer...',\n          html: 'We hate to see you go. Here is a sweet offer...',\n        });\n      }\n    }\n    return user;\n  }\n}\n\nexport async function handleCustomerSubscriptionDeleted(\n  subscription: Stripe.Subscription,\n  prismaUserDelegate: PrismaClient[\"user\"]\n) {\n  const userStripeId = validateUserStripeIdOrThrow(subscription.customer);\n  return updateUserStripePaymentDetails({ userStripeId, subscriptionStatus: 'deleted' }, prismaUserDelegate);\n}\n\nfunction validateUserStripeIdOrThrow(userStripeId: Stripe.Checkout.Session['customer']): string {\n  if (!userStripeId) throw new HttpError(400, 'No customer id');\n  if (typeof userStripeId !== 'string') throw new HttpError(400, 'Customer id is not a string');\n  return userStripeId;\n}\n\nconst LineItemsPriceSchema = z.object({\n  data: z.array(\n    z.object({\n      price: z.object({\n        id: z.string(),\n      }),\n    })\n  ),\n});\n\nfunction extractPriceId(items: Stripe.Checkout.Session['line_items'] | Stripe.Subscription['items']) {\n  const result = LineItemsPriceSchema.safeParse(items);\n  if (!result.success) {\n    throw new HttpError(400, 'No price id in stripe event object');\n  }\n  if (result.data.data.length > 1) {\n    throw new HttpError(400, 'More than one item in stripe event object');\n  }\n  return result.data.data[0].price.id;\n}\n\nfunction getPlanIdByPriceId(priceId: string): PaymentPlanId {\n  const planId = Object.values(PaymentPlanId).find(\n    (planId) => paymentPlans[planId].getPaymentProcessorPlanId() === priceId\n  );\n  if (!planId) {\n    throw new Error(`No plan with Stripe price id ${priceId}`);\n  }\n  return planId;\n}","import type { PaymentPlanEffect } from '../plans';\nimport type { CreateCheckoutSessionArgs, FetchCustomerPortalUrlArgs, PaymentProcessor } from '../paymentProcessor'\nimport { fetchStripeCustomer, createStripeCheckoutSession } from './checkoutUtils';\nimport { requireNodeEnvVar } from '../../server/utils';\nimport { stripeWebhook, stripeMiddlewareConfigFn } from './webhook';\n\nexport type StripeMode = 'subscription' | 'payment';\n\nexport const stripePaymentProcessor: PaymentProcessor = {\n  id: 'stripe',\n  createCheckoutSession: async ({ userId, userEmail, paymentPlan, prismaUserDelegate }: CreateCheckoutSessionArgs) => {\n    const customer = await fetchStripeCustomer(userEmail);\n    const stripeSession = await createStripeCheckoutSession({\n      userId,\n      priceId: paymentPlan.getPaymentProcessorPlanId(),\n      customerId: customer.id,\n      mode: paymentPlanEffectToStripeMode(paymentPlan.effect),\n    });\n    await prismaUserDelegate.update({\n      where: {\n        id: userId\n      },\n      data: {\n        paymentProcessorUserId: customer.id\n      }\n    })\n    if (!stripeSession.url) throw new Error('Error creating Stripe Checkout Session');\n    const session = {\n      url: stripeSession.url,\n      id: stripeSession.id,\n    };\n    return { session };\n  },\n  fetchCustomerPortalUrl: async (_args: FetchCustomerPortalUrlArgs) =>\n    requireNodeEnvVar('STRIPE_CUSTOMER_PORTAL_URL'),\n  webhook: stripeWebhook,\n  webhookMiddlewareConfigFn: stripeMiddlewareConfigFn,\n};\n\nfunction paymentPlanEffectToStripeMode(planEffect: PaymentPlanEffect): StripeMode {\n  const effectToMode: Record<PaymentPlanEffect['kind'], StripeMode> = {\n    subscription: 'subscription',\n    credits: 'payment',\n  };\n  return effectToMode[planEffect.kind];\n}\n","import type { PaymentPlan } from './plans';\nimport type { PaymentsWebhook } from 'wasp/server/api';\nimport type { MiddlewareConfigFn } from 'wasp/server';\nimport { PrismaClient } from '@prisma/client';\nimport { stripePaymentProcessor } from './stripe/paymentProcessor';\nimport { lemonSqueezyPaymentProcessor } from './lemonSqueezy/paymentProcessor';\n\nexport interface CreateCheckoutSessionArgs {\n  userId: string;\n  userEmail: string;\n  paymentPlan: PaymentPlan;\n  prismaUserDelegate: PrismaClient['user'];\n}\nexport interface FetchCustomerPortalUrlArgs { \n  userId: string; \n  prismaUserDelegate: PrismaClient['user']; \n};\n\nexport interface PaymentProcessor {\n  id: 'stripe' | 'lemonsqueezy';\n  createCheckoutSession: (args: CreateCheckoutSessionArgs) => Promise<{ session: { id: string; url: string }; }>; \n  fetchCustomerPortalUrl: (args: FetchCustomerPortalUrlArgs) => Promise<string | null>;\n  webhook: PaymentsWebhook;\n  webhookMiddlewareConfigFn: MiddlewareConfigFn;\n}\n\n/**\n * Choose which payment processor you'd like to use, then delete the \n * other payment processor code that you're not using  from `/src/payment`\n */\n// export const paymentProcessor: PaymentProcessor = lemonSqueezyPaymentProcessor;\nexport const paymentProcessor: PaymentProcessor = stripePaymentProcessor;\n","import type { GenerateCheckoutSession, GetCustomerPortalUrl } from 'wasp/server/operations';\nimport { PaymentPlanId, paymentPlans } from '../payment/plans';\nimport { paymentProcessor } from './paymentProcessor';\nimport { HttpError } from 'wasp/server';\n\nexport type CheckoutSession = {\n  sessionUrl: string | null;\n  sessionId: string;\n};\n\nexport const generateCheckoutSession: GenerateCheckoutSession<PaymentPlanId, CheckoutSession> = async (\n  paymentPlanId,\n  context\n) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  const userId = context.user.id;\n  const userEmail = context.user.email;\n  if (!userEmail) {\n    throw new HttpError(\n      403,\n      'User needs an email to make a payment. If using the usernameAndPassword Auth method, switch to an Auth method that provides an email.'\n    );\n  }\n\n  const paymentPlan = paymentPlans[paymentPlanId];\n  const { session } = await paymentProcessor.createCheckoutSession({\n    userId,\n    userEmail,\n    paymentPlan,\n    prismaUserDelegate: context.entities.User\n  });\n\n  return {\n    sessionUrl: session.url,\n    sessionId: session.id,\n  };\n};\n\nexport const getCustomerPortalUrl: GetCustomerPortalUrl<void, string | null> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return paymentProcessor.fetchCustomerPortalUrl({\n    userId: context.user.id,\n    prismaUserDelegate: context.entities.User,\n  });\n};\n","import { prisma } from 'wasp/server'\n\nimport { generateCheckoutSession } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (generateCheckoutSession as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport generateCheckoutSession from '../../actions/generateCheckoutSession.js'\n\nexport default createAction(generateCheckoutSession)\n","import { randomUUID } from 'crypto';\nimport { S3Client } from '@aws-sdk/client-s3';\nimport { GetObjectCommand, PutObjectCommand } from '@aws-sdk/client-s3';\nimport { getSignedUrl } from '@aws-sdk/s3-request-presigner';\n\nconst s3Client = new S3Client({\n  region: process.env.AWS_S3_REGION,\n  credentials: {\n    accessKeyId: process.env.AWS_S3_IAM_ACCESS_KEY!,\n    secretAccessKey: process.env.AWS_S3_IAM_SECRET_KEY!,\n  },\n});\n\ntype S3Upload = {\n  fileType: string;\n  userInfo: string;\n}\n\nexport const getUploadFileSignedURLFromS3 = async ({fileType, userInfo}: S3Upload) => {\n  const ex = fileType.split('/')[1];\n  const Key = `${userInfo}/${randomUUID()}.${ex}`;\n  const s3Params = {\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key,\n    ContentType: `${fileType}`,\n  };\n  const command = new PutObjectCommand(s3Params);\n  const uploadUrl = await getSignedUrl(s3Client, command, { expiresIn: 3600,});\n  return { uploadUrl, key: Key };\n}\n\nexport const getDownloadFileSignedURLFromS3 = async ({ key }: { key: string }) => {\n  const s3Params = {\n    Bucket: process.env.AWS_S3_FILES_BUCKET,\n    Key: key,\n  };\n  const command = new GetObjectCommand(s3Params);\n  return await getSignedUrl(s3Client, command, { expiresIn: 3600 });\n}","import { HttpError } from 'wasp/server';\nimport { type File } from 'wasp/entities';\nimport {\n  type CreateFile,\n  type GetAllFilesByUser,\n  type GetDownloadFileSignedURL,\n} from 'wasp/server/operations';\n\nimport {\n  getUploadFileSignedURLFromS3,\n  getDownloadFileSignedURLFromS3\n} from './s3Utils';\n\ntype FileDescription = {\n  fileType: string;\n  name: string;\n};\n\nexport const createFile: CreateFile<FileDescription, File> = async ({ fileType, name }, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n\n  const userInfo = context.user.id;\n\n  const { uploadUrl, key } = await getUploadFileSignedURLFromS3({ fileType, userInfo });\n\n  return await context.entities.File.create({\n    data: {\n      name,\n      key,\n      uploadUrl,\n      type: fileType,\n      user: { connect: { id: context.user.id } },\n    },\n  });\n};\n\nexport const getAllFilesByUser: GetAllFilesByUser<void, File[]> = async (_args, context) => {\n  if (!context.user) {\n    throw new HttpError(401);\n  }\n  return context.entities.File.findMany({\n    where: {\n      user: {\n        id: context.user.id,\n      },\n    },\n    orderBy: {\n      createdAt: 'desc',\n    },\n  });\n};\n\nexport const getDownloadFileSignedURL: GetDownloadFileSignedURL<{ key: string }, string> = async (\n  { key },\n  _context\n) => {\n  return await getDownloadFileSignedURLFromS3({ key });\n};\n","import { prisma } from 'wasp/server'\n\nimport { createFile } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (createFile as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createAction } from '../../middleware/operations.js'\nimport createFile from '../../actions/createFile.js'\n\nexport default createAction(createFile)\n","import { prisma } from 'wasp/server'\n\nimport { getPaginatedUsers } from '../../../../../src/user/operations'\n\n\nexport default async function (args, context) {\n  return (getPaginatedUsers as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getPaginatedUsers from '../../queries/getPaginatedUsers.js'\n\nexport default createQuery(getPaginatedUsers)\n","import { prisma } from 'wasp/server'\n\nimport { getGptResponses } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (getGptResponses as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      GptResponse: prisma.gptResponse,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getGptResponses from '../../queries/getGptResponses.js'\n\nexport default createQuery(getGptResponses)\n","import { prisma } from 'wasp/server'\n\nimport { getAllTasksByUser } from '../../../../../src/demo-ai-app/operations'\n\n\nexport default async function (args, context) {\n  return (getAllTasksByUser as any)(args, {\n    ...context,\n    entities: {\n      Task: prisma.task,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getAllTasksByUser from '../../queries/getAllTasksByUser.js'\n\nexport default createQuery(getAllTasksByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getCustomerPortalUrl } from '../../../../../src/payment/operations'\n\n\nexport default async function (args, context) {\n  return (getCustomerPortalUrl as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getCustomerPortalUrl from '../../queries/getCustomerPortalUrl.js'\n\nexport default createQuery(getCustomerPortalUrl)\n","import { prisma } from 'wasp/server'\n\nimport { getAllFilesByUser } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getAllFilesByUser as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getAllFilesByUser from '../../queries/getAllFilesByUser.js'\n\nexport default createQuery(getAllFilesByUser)\n","import { prisma } from 'wasp/server'\n\nimport { getDownloadFileSignedURL } from '../../../../../src/file-upload/operations'\n\n\nexport default async function (args, context) {\n  return (getDownloadFileSignedURL as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      File: prisma.file,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDownloadFileSignedURL from '../../queries/getDownloadFileSignedURL.js'\n\nexport default createQuery(getDownloadFileSignedURL)\n","import { type DailyStats, type PageViewSource } from 'wasp/entities';\nimport { HttpError } from 'wasp/server';\nimport { type GetDailyStats } from 'wasp/server/operations';\n\ntype DailyStatsWithSources = DailyStats & {\n  sources: PageViewSource[];\n};\n\ntype DailyStatsValues = {\n  dailyStats: DailyStatsWithSources;\n  weeklyStats: DailyStatsWithSources[];\n};\n\nexport const getDailyStats: GetDailyStats<void, DailyStatsValues> = async (_args, context) => {\n  if (!context.user?.isAdmin) {\n    throw new HttpError(401);\n  }\n  const dailyStats = await context.entities.DailyStats.findFirstOrThrow({\n    orderBy: {\n      date: 'desc',\n    },\n    include: {\n      sources: true,\n    },\n  });\n\n  const weeklyStats = await context.entities.DailyStats.findMany({\n    orderBy: {\n      date: 'desc',\n    },\n    take: 7,\n    include: {\n      sources: true,\n    },\n  });\n\n  return { dailyStats, weeklyStats };\n};\n","import { prisma } from 'wasp/server'\n\nimport { getDailyStats } from '../../../../../src/analytics/operations'\n\n\nexport default async function (args, context) {\n  return (getDailyStats as any)(args, {\n    ...context,\n    entities: {\n      User: prisma.user,\n      DailyStats: prisma.dailyStats,\n    },\n  })\n}\n","import { createQuery } from '../../middleware/operations.js'\nimport getDailyStats from '../../queries/getDailyStats.js'\n\nexport default createQuery(getDailyStats)\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\n\nimport updateCurrentUser from './updateCurrentUser.js'\nimport updateUserById from './updateUserById.js'\nimport generateGptResponse from './generateGptResponse.js'\nimport createTask from './createTask.js'\nimport deleteTask from './deleteTask.js'\nimport updateTask from './updateTask.js'\nimport generateCheckoutSession from './generateCheckoutSession.js'\nimport createFile from './createFile.js'\nimport getPaginatedUsers from './getPaginatedUsers.js'\nimport getGptResponses from './getGptResponses.js'\nimport getAllTasksByUser from './getAllTasksByUser.js'\nimport getCustomerPortalUrl from './getCustomerPortalUrl.js'\nimport getAllFilesByUser from './getAllFilesByUser.js'\nimport getDownloadFileSignedURL from './getDownloadFileSignedURL.js'\nimport getDailyStats from './getDailyStats.js'\n\nconst router = express.Router()\n\nrouter.post('/update-current-user', auth, updateCurrentUser)\nrouter.post('/update-user-by-id', auth, updateUserById)\nrouter.post('/generate-gpt-response', auth, generateGptResponse)\nrouter.post('/create-task', auth, createTask)\nrouter.post('/delete-task', auth, deleteTask)\nrouter.post('/update-task', auth, updateTask)\nrouter.post('/generate-checkout-session', auth, generateCheckoutSession)\nrouter.post('/create-file', auth, createFile)\nrouter.post('/get-paginated-users', auth, getPaginatedUsers)\nrouter.post('/get-gpt-responses', auth, getGptResponses)\nrouter.post('/get-all-tasks-by-user', auth, getAllTasksByUser)\nrouter.post('/get-customer-portal-url', auth, getCustomerPortalUrl)\nrouter.post('/get-all-files-by-user', auth, getAllFilesByUser)\nrouter.post('/get-download-file-signed-url', auth, getDownloadFileSignedURL)\nrouter.post('/get-daily-stats', auth, getDailyStats)\n\nexport default router\n","import express from 'express'\nimport cookieParser from 'cookie-parser'\nimport logger from 'morgan'\nimport cors from 'cors'\nimport helmet from 'helmet'\n\nimport { config } from 'wasp/server'\nimport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\nexport type { MiddlewareConfig, MiddlewareConfigFn } from 'wasp/server/middleware'\n\nconst _waspGlobalMiddlewareConfigFn = (mc: MiddlewareConfig) => mc\n\n// This is the set of middleware Wasp supplies by default.\n// NOTE: Remember to update the docs of these change.\nconst defaultGlobalMiddlewareConfig: MiddlewareConfig = new Map([\n  ['helmet', helmet()],\n  ['cors', cors({ origin: config.allowedCORSOrigins })],\n  ['logger', logger('dev')],\n  ['express.json', express.json()],\n  ['express.urlencoded', express.urlencoded({ extended: false })],\n  ['cookieParser', cookieParser()]\n])\n\n// This is the global middleware that is the result of applying the user's modifications.\n// It will be used as the basis for Operations and APIs (unless they are further customized).\nconst globalMiddlewareConfig: MiddlewareConfig = _waspGlobalMiddlewareConfigFn(defaultGlobalMiddlewareConfig)\n\n// This function returns an array of Express middleware to be used by a router. It optionally\n// accepts a function that can modify the global middleware for specific route customization.\nexport function globalMiddlewareConfigForExpress(middlewareConfigFn?: MiddlewareConfigFn): express.RequestHandler[] {\n  if (!middlewareConfigFn) {\n    return Array.from(globalMiddlewareConfig.values())\n  }\n\n  // Make a clone so they can't mess up the global Map for any other routes calling this.\n  const globalMiddlewareConfigClone = new Map(globalMiddlewareConfig)\n  const modifiedMiddlewareConfig = middlewareConfigFn(globalMiddlewareConfigClone)\n  return Array.from(modifiedMiddlewareConfig.values())\n}\n","import { serialize as superjsonSerialize } from 'superjson'\nimport { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\n\nexport default handleRejection(async (req, res) => {\n  if (req.user) {\n    return res.json(superjsonSerialize(req.user))\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { handleRejection } from 'wasp/server/utils'\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { invalidateSession } from 'wasp/auth/session'\n\nexport default handleRejection(async (req, res) => {\n  if (req.sessionId) {\n    await invalidateSession(req.sessionId)\n    return res.json({ success: true })\n  } else {\n    throwInvalidCredentialsError()\n  }\n})\n","import { Request, Response } from 'express';\nimport { throwInvalidCredentialsError } from 'wasp/auth/utils'\nimport { verifyPassword } from 'wasp/auth/password'\nimport {\n    createProviderId,\n    findAuthIdentity,\n    findAuthWithUserBy,\n    deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils'\nimport { createSession } from 'wasp/auth/session'\nimport { ensureValidEmail, ensurePasswordIsPresent } from 'wasp/auth/validation'\n\nexport function getLoginRoute() {\n    return async function login(\n        req: Request<{ email: string; password: string; }>,\n        res: Response,\n    ): Promise<Response<{ sessionId: string } | undefined>> {\n        const fields = req.body ?? {}\n        ensureValidArgs(fields)\n\n        const authIdentity = await findAuthIdentity(\n            createProviderId(\"email\", fields.email)\n        )\n        if (!authIdentity) {\n            throwInvalidCredentialsError()\n        }\n        const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData)\n        if (!providerData.isEmailVerified) {\n            throwInvalidCredentialsError()\n        }\n        try {\n            await verifyPassword(providerData.hashedPassword, fields.password);\n        } catch(e) {\n            throwInvalidCredentialsError()\n        }\n    \n        const auth = await findAuthWithUserBy({ id: authIdentity.authId })\n        const session = await createSession(auth.id)\n      \n        return res.json({\n            sessionId: session.id,\n        })\n    };\n}\n\nfunction ensureValidArgs(args: unknown): void {\n    ensureValidEmail(args);\n    ensurePasswordIsPresent(args);\n}\n","import { HttpError } from 'wasp/server';\nimport type { OnAfterSignupHook } from 'wasp/server/auth';\n\nexport const onAfterSignup: OnAfterSignupHook = async ({ providerId, user, prisma }) => {\n  // For Stripe to function correctly, we need a valid email associated with the user.\n  // Discord allows an email address to be optional. If this is the case, we delete the user\n  // from our DB and throw an error.\n  if (providerId.providerName === 'discord' && !user.email) {\n    await prisma.user.delete({\n      where: {\n        id: user.id,\n      },\n    });\n    throw new HttpError(403, 'Discord user needs a valid email to sign up');\n  }\n};\n","import { prisma } from 'wasp/server'\nimport type {\n  OnAfterSignupHook,\n  OnBeforeOAuthRedirectHook,\n  OnBeforeSignupHook,\n  InternalAuthHookParams,\n} from 'wasp/server/auth'\nimport { onAfterSignup as onAfterSignupHook_ext } from '../../../../../src/auth/hooks'\n\n/*\n  These are \"internal hook functions\" based on the user defined hook functions.\n\n  In the server code (e.g. email signup) we import these functions and call them.\n\n  We want to pass extra params to the user defined hook functions, but we don't want to\n  pass them when we call them in the server code.\n*/\n\n/**\n * This is a no-op function since the user didn't define the onBeforeSignup hook.\n */\nexport const onBeforeSignupHook: InternalFunctionForHook<OnBeforeSignupHook> = async (_params) => {}\n\nexport const onAfterSignupHook: InternalFunctionForHook<OnAfterSignupHook> = (params) =>\n  onAfterSignupHook_ext({\n    prisma,\n    ...params,\n  })\n\n/**\n * This is an identity function since the user didn't define the onBeforeOAuthRedirect hook.\n */\nexport const onBeforeOAuthRedirectHook: InternalFunctionForHook<OnBeforeOAuthRedirectHook> = async (params) => params\n\n/*\n  We pass extra params to the user defined hook functions, but we don't want to\n  pass the extra params (e.g. 'prisma') when we call the hooks in the server code.\n  So, we need to remove the extra params from the params object which is used to define the\n  internal hook functions.\n*/\ntype InternalFunctionForHook<Fn extends (args: never) => unknown | Promise<unknown>> = Fn extends (\n  params: infer P,\n) => infer R\n  ? (args: Omit<P, keyof InternalAuthHookParams>) => R\n  : never\n","import { Request, Response } from 'express'\nimport { EmailFromField } from 'wasp/server/email/core/types'\nimport {\n  createUser,\n  createProviderId,\n  findAuthIdentity,\n  deleteUserByAuthId,\n  doFakeWork,\n  deserializeAndSanitizeProviderData,\n  sanitizeAndSerializeProviderData,\n  rethrowPossibleAuthError,\n} from 'wasp/auth/utils'\nimport {\n  createEmailVerificationLink,\n  sendEmailVerificationEmail,\n  isEmailResendAllowed,\n} from 'wasp/server/auth/email/utils'\nimport {\n  ensureValidEmail,\n  ensureValidPassword,\n  ensurePasswordIsPresent,\n} from 'wasp/auth/validation'\nimport { GetVerificationEmailContentFn } from 'wasp/server/auth/email'\nimport { validateAndGetUserFields } from 'wasp/auth/utils'\nimport { HttpError } from 'wasp/server'\nimport { type UserSignupFields } from 'wasp/auth/providers/types'\nimport { onBeforeSignupHook, onAfterSignupHook } from '../../hooks.js'\n\nexport function getSignupRoute({\n  userSignupFields,\n  fromField,\n  clientRoute,\n  getVerificationEmailContent,\n  isEmailAutoVerified,\n}: {\n  userSignupFields?: UserSignupFields\n  fromField: EmailFromField\n  clientRoute: string\n  getVerificationEmailContent: GetVerificationEmailContentFn\n  isEmailAutoVerified: boolean\n}) {\n  return async function signup(\n    req: Request<{ email: string; password: string }>,\n    res: Response,\n  ): Promise<Response<{ success: true }>> {\n    const fields = req.body\n    ensureValidArgs(fields)\n\n    const providerId = createProviderId('email', fields.email)\n    const existingAuthIdentity = await findAuthIdentity(providerId)\n\n    /**\n     *\n     * There are two cases to consider in the case of an existing user:\n     * - if we allow unverified login\n     * - if the user is already verified\n     *\n     * Let's see what happens when we **don't** allow unverified login:\n     *\n     * We are handling the case of an existing auth identity in two ways:\n     *\n     * 1. If the user already exists and is verified, we don't want\n     *   to leak that piece of info and instead we pretend that the user\n     *   was created successfully.\n     *    - This prevents the attacker from learning which emails already have\n     *        an account created.\n     *\n     * 2. If the user is not verified:\n     *   - We check when we last sent a verification email and if it was less than X seconds ago,\n     *     we don't send another one.\n     *   - If it was more than X seconds ago, we delete the user and create a new one.\n     *   - This prevents the attacker from creating an account with somebody\n     *     else's email address and therefore permanently making that email\n     *     address unavailable for later account creation (by real owner).\n     */\n    if (existingAuthIdentity) {\n      const providerData = deserializeAndSanitizeProviderData<'email'>(\n        existingAuthIdentity.providerData,\n      )\n\n      // TOOD: faking work makes sense if the time spent on faking the work matches the time\n      // it would take to send the email. Atm, the fake work takes obviously longer than sending\n      // the email!\n      if (providerData.isEmailVerified) {\n        await doFakeWork()\n        return res.json({ success: true })\n      }\n\n      // TODO: we are still leaking information here since when we are faking work\n      // we are not checking if the email was sent or not!\n      const { isResendAllowed, timeLeft } = isEmailResendAllowed(\n        providerData,\n        'passwordResetSentAt',\n      )\n      if (!isResendAllowed) {\n        throw new HttpError(\n          400,\n          `Please wait ${timeLeft} secs before trying again.`,\n        )\n      }\n\n      try {\n        await deleteUserByAuthId(existingAuthIdentity.authId)\n      } catch (e: unknown) {\n        rethrowPossibleAuthError(e)\n      }\n    }\n\n    const userFields = await validateAndGetUserFields(fields, userSignupFields)\n\n    const newUserProviderData = await sanitizeAndSerializeProviderData<'email'>(\n      {\n        hashedPassword: fields.password,\n        isEmailVerified: isEmailAutoVerified ? true : false,\n        emailVerificationSentAt: null,\n        passwordResetSentAt: null,\n      },\n    )\n\n    try {\n      await onBeforeSignupHook({ req, providerId })\n      const user = await createUser(\n        providerId,\n        newUserProviderData,\n        // Using any here because we want to avoid TypeScript errors and\n        // rely on Prisma to validate the data.\n        userFields as any,\n      )\n      await onAfterSignupHook({ req, providerId, user })\n    } catch (e: unknown) {\n      rethrowPossibleAuthError(e)\n    }\n\n    // Wasp allows for auto-verification of emails in development mode to\n    // make writing e2e tests easier.\n    if (isEmailAutoVerified) {\n      return res.json({ success: true })\n    }\n\n    const verificationLink = await createEmailVerificationLink(\n      fields.email,\n      clientRoute,\n    )\n    try {\n      await sendEmailVerificationEmail(fields.email, {\n        from: fromField,\n        to: fields.email,\n        ...getVerificationEmailContent({ verificationLink }),\n      })\n    } catch (e: unknown) {\n      console.error('Failed to send email verification email:', e)\n      throw new HttpError(500, 'Failed to send email verification email.')\n    }\n\n    return res.json({ success: true })\n  }\n}\n\nfunction ensureValidArgs(args: unknown): void {\n  ensureValidEmail(args)\n  ensurePasswordIsPresent(args)\n  ensureValidPassword(args)\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    doFakeWork,\n    deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils';\nimport {\n    createPasswordResetLink,\n    sendPasswordResetEmail,\n    isEmailResendAllowed,\n} from \"wasp/server/auth/email/utils\";\nimport { ensureValidEmail } from 'wasp/auth/validation';\nimport type { EmailFromField } from 'wasp/server/email/core/types';\nimport { GetPasswordResetEmailContentFn } from 'wasp/server/auth/email';\nimport { HttpError } from 'wasp/server';\n\nexport function getRequestPasswordResetRoute({\n   fromField,\n   clientRoute,\n   getPasswordResetEmailContent,\n}: {\n    fromField: EmailFromField;\n    clientRoute: string;\n    getPasswordResetEmailContent: GetPasswordResetEmailContentFn;\n}) {\n    return async function requestPasswordReset(\n        req: Request<{ email: string; }>,\n        res: Response,\n    ): Promise<Response<{ success: true }>> {\n        const args = req.body ?? {};\n        ensureValidEmail(args);\n\n        const authIdentity = await findAuthIdentity(\n            createProviderId(\"email\", args.email),\n        );\n\n        /**\n         * By doing fake work, we make it harder to enumerate users by measuring\n         * the time it takes to respond. If we would respond immediately, an attacker\n         * could measure the time it takes to respond and figure out if the user exists.\n         */\n\n        if (!authIdentity) {\n            await doFakeWork();\n            return res.json({ success: true });\n        }\n\n        const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData);\n        const { isResendAllowed, timeLeft } = isEmailResendAllowed(providerData, 'passwordResetSentAt');\n        if (!isResendAllowed) {\n            throw new HttpError(400, `Please wait ${timeLeft} secs before trying again.`);\n        }\n\n        const passwordResetLink = await createPasswordResetLink(args.email, clientRoute);\n        try {\n            const email = authIdentity.providerUserId\n            await sendPasswordResetEmail(\n                email,\n                {\n                    from: fromField,\n                    to: email,\n                    ...getPasswordResetEmailContent({ passwordResetLink }),\n                },\n            );\n        } catch (e: any) {\n            console.error(\"Failed to send password reset email:\", e);\n            throw new HttpError(500, \"Failed to send password reset email.\");\n        }\n    \n        return res.json({ success: true });\n    };\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    updateAuthIdentityProviderData,\n    deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils';\nimport { validateJWT } from 'wasp/auth/jwt'\nimport { ensureTokenIsPresent, ensurePasswordIsPresent, ensureValidPassword } from 'wasp/auth/validation';\nimport { HttpError } from 'wasp/server';\n\nexport async function resetPassword(\n    req: Request<{ token: string; password: string; }>,\n    res: Response,\n): Promise<Response<{ success: true }>> {\n    const args = req.body ?? {};\n    ensureValidArgs(args);\n\n    const { token, password } = args;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Password reset failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Password reset failed, invalid token\");\n    }\n    \n    const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        // The act of resetting the password verifies the email\n        isEmailVerified: true,\n        // The password will be hashed when saving the providerData\n        // in the DB\n        hashedPassword: password,\n    });\n\n    return res.json({ success: true });\n};\n\nfunction ensureValidArgs(args: unknown): void {\n    ensureTokenIsPresent(args);\n    ensurePasswordIsPresent(args);\n    ensureValidPassword(args);\n}\n","import { Request, Response } from 'express';\nimport {\n    createProviderId,\n    findAuthIdentity,\n    updateAuthIdentityProviderData,\n    deserializeAndSanitizeProviderData,\n} from 'wasp/auth/utils';\nimport { validateJWT } from 'wasp/auth/jwt'\nimport { HttpError } from 'wasp/server';\n\n\nexport async function verifyEmail(\n    req: Request<{ token: string }>,\n    res: Response,\n): Promise<Response<{ success: true }>> {\n    const { token } = req.body;\n    const { email } = await validateJWT<{ email: string }>(token)\n        .catch(() => {\n            throw new HttpError(400, \"Email verification failed, invalid token\");\n        });\n\n    const providerId = createProviderId('email', email);\n    const authIdentity = await findAuthIdentity(providerId);\n    if (!authIdentity) {\n        throw new HttpError(400, \"Email verification failed, invalid token\");\n    }\n\n    const providerData = deserializeAndSanitizeProviderData<'email'>(authIdentity.providerData);\n\n    await updateAuthIdentityProviderData(providerId, providerData, {\n        isEmailVerified: true,\n    });\n\n    return res.json({ success: true });\n};\n\n","import { z } from 'zod';\nimport { defineUserSignupFields } from 'wasp/auth/providers/types';\n\nconst adminEmails = process.env.ADMIN_EMAILS?.split(',') || [];\n\nexport const getEmailUserFields = defineUserSignupFields({\n  username: (data: any) => data.email,\n  isAdmin: (data: any) => adminEmails.includes(data.email),\n  email: (data: any) => data.email,\n});\n\nconst githubDataSchema = z.object({\n  profile: z.object({\n    emails: z.array(\n      z.object({\n        email: z.string(),\n      })\n    ),\n    login: z.string(),\n  }),\n});\n\nexport const getGitHubUserFields = defineUserSignupFields({\n  email: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return githubData.profile.emails[0].email;\n  },\n  username: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return githubData.profile.login;\n  },\n  isAdmin: (data) => {\n    const githubData = githubDataSchema.parse(data);\n    return adminEmails.includes(githubData.profile.emails[0].email);\n  },\n});\n\n// NOTE: if we don't want to access users' emails, we can use scope [\"user:read\"]\n// instead of [\"user\"] and access args.profile.username instead\nexport function getGitHubAuthConfig() {\n  return {\n    scopes: ['user'],\n  };\n}\n\nconst googleDataSchema = z.object({\n  profile: z.object({\n    email: z.string(),\n  }),\n});\n\nexport const getGoogleUserFields = defineUserSignupFields({\n  email: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  username: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return googleData.profile.email;\n  },\n  isAdmin: (data) => {\n    const googleData = googleDataSchema.parse(data);\n    return adminEmails.includes(googleData.profile.email);\n  },\n});\n\nexport function getGoogleAuthConfig() {\n  return {\n    scopes: ['profile', 'email'], // must include at least 'profile' for Google\n  };\n}\n\nconst discordDataSchema = z.object({\n  profile: z.object({\n    username: z.string(),\n    email: z.string().email().nullable(),\n  }),\n});\n\nexport const getDiscordUserFields = defineUserSignupFields({\n  email: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    return discordData.profile.email;\n  },\n  username: (data) => {\n    const discordData = discordDataSchema.parse(data);\n    return discordData.profile.username;\n  },\n  isAdmin: (data) => {\n    const email = discordDataSchema.parse(data).profile.email;\n    return !!email && adminEmails.includes(email);\n  },\n});\n\nexport function getDiscordAuthConfig() {\n  return {\n    scopes: ['identify', 'email'],\n  };\n}\n","import { type GetVerificationEmailContentFn, type GetPasswordResetEmailContentFn } from 'wasp/server/auth';\n\nexport const getVerificationEmailContent: GetVerificationEmailContentFn = ({ verificationLink }) => ({\n  subject: 'Verify your email',\n  text: `Click the link below to verify your email: ${verificationLink}`,\n  html: `\n        <p>Click the link below to verify your email</p>\n        <a href=\"${verificationLink}\">Verify email</a>\n    `,\n});\n\nexport const getPasswordResetEmailContent: GetPasswordResetEmailContentFn = ({ passwordResetLink }) => ({\n  subject: 'Password reset',\n  text: `Click the link below to reset your password: ${passwordResetLink}`,\n  html: `\n        <p>Click the link below to reset your password</p>\n        <a href=\"${passwordResetLink}\">Reset password</a>\n    `,\n});\n","import { Router, Request, Response, NextFunction } from \"express\";\n\nimport { ProviderConfig } from \"wasp/auth/providers/types\";\nimport type { EmailFromField } from \"wasp/server/email/core/types\";\n\nimport { getLoginRoute } from \"../email/login.js\";\nimport { getSignupRoute } from \"../email/signup.js\";\nimport { getRequestPasswordResetRoute } from \"../email/requestPasswordReset.js\";\nimport { resetPassword } from \"../email/resetPassword.js\";\nimport { verifyEmail } from \"../email/verifyEmail.js\";\nimport { GetVerificationEmailContentFn, GetPasswordResetEmailContentFn } from \"wasp/server/auth/email\";\nimport { handleRejection } from \"wasp/server/utils\";\n\nimport { getEmailUserFields } from '../../../../../../../src/auth/userSignupFields'\nconst _waspUserSignupFields = getEmailUserFields\n\nimport { getVerificationEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetVerificationEmailContent: GetVerificationEmailContentFn = getVerificationEmailContent;\nimport { getPasswordResetEmailContent } from '../../../../../../../src/auth/email-and-pass/emails'\nconst _waspGetPasswordResetEmailContent: GetPasswordResetEmailContentFn = getPasswordResetEmailContent;\n\n\nconst fromField: EmailFromField = {\n    name: 'Open SaaS App',\n    email: 'me@example.com',\n};\n\nconst config: ProviderConfig = {\n    id: \"email\",\n    displayName: \"Email and password\",\n    createRouter() {\n        const router = Router();\n\n        const loginRoute = handleRejection(getLoginRoute());\n        router.post('/login', loginRoute);\n\n        const signupRoute = handleRejection(getSignupRoute({\n            userSignupFields: _waspUserSignupFields,\n            fromField,\n            clientRoute: '/email-verification',\n            getVerificationEmailContent: _waspGetVerificationEmailContent,\n            isEmailAutoVerified: process.env.SKIP_EMAIL_VERIFICATION_IN_DEV === 'true',\n        }));\n        router.post('/signup', signupRoute);\n        \n        const requestPasswordResetRoute = handleRejection(getRequestPasswordResetRoute({\n            fromField,\n            clientRoute: '/password-reset',\n            getPasswordResetEmailContent: _waspGetPasswordResetEmailContent,\n        }));\n        router.post('/request-password-reset', requestPasswordResetRoute);\n\n        router.post('/reset-password', handleRejection(resetPassword));\n        router.post('/verify-email', handleRejection(verifyEmail));\n\n        return router;\n    },\n}\n\nexport default config;\n","import { Router } from \"express\";\n\nimport email from './config/email.js'\n\nconst providers = [\n  email,\n];\n\nconst router = Router();\n\n\nfor (const provider of providers) {\n  const { createRouter } = provider;\n  const providerRouter = createRouter(provider);\n  router.use(`/${provider.id}`, providerRouter);\n  console.log(`🚀 \"${provider.displayName}\" auth initialized`);\n}\n\nexport default router;\n","import express from 'express'\n\nimport auth from 'wasp/core/auth'\nimport me from './me.js'\nimport logout from './logout.js'\n\nimport providersRouter from '../../auth/providers/index.js'\n\nconst router = express.Router()\n\nrouter.get('/me', auth, me)\nrouter.post('/logout', auth, logout)\nrouter.use('/', providersRouter)\n\nexport default router\n","import { paymentProcessor } from './paymentProcessor';\n\nexport const paymentsWebhook = paymentProcessor.webhook;\nexport const paymentsMiddlewareConfigFn = paymentProcessor.webhookMiddlewareConfigFn;\n","import express from 'express'\nimport { prisma } from 'wasp/server'\nimport { handleRejection } from 'wasp/server/utils'\nimport { MiddlewareConfigFn, globalMiddlewareConfigForExpress } from '../../middleware/index.js'\nimport auth from 'wasp/core/auth'\nimport { type AuthUserData, makeAuthUserIfPossible } from 'wasp/auth/user'\n\n\nimport { paymentsWebhook as _wasppaymentsWebhookfn } from '../../../../../../src/payment/webhook'\nimport { paymentsMiddlewareConfigFn as _wasppaymentsWebhookmiddlewareConfigFn } from '../../../../../../src/payment/webhook'\n\nconst idFn: MiddlewareConfigFn = x => x\n\n\nconst router = express.Router()\n\n\nconst paymentsWebhookMiddleware = globalMiddlewareConfigForExpress(_wasppaymentsWebhookmiddlewareConfigFn)\nrouter.post(\n  '/payments-webhook',\n  [auth, ...paymentsWebhookMiddleware],\n  handleRejection(\n    (\n      req: Parameters<typeof _wasppaymentsWebhookfn>[0] & { user: AuthUserData | null },\n      res: Parameters<typeof _wasppaymentsWebhookfn>[1],\n    ) => {\n      const context = {\n        user: makeAuthUserIfPossible(req.user),\n        entities: {\n          User: prisma.user,\n        },\n      }\n      return _wasppaymentsWebhookfn(req, res, context)\n    }\n  )\n)\n\nexport default router\n","import express from 'express'\nimport operations from './operations/index.js'\nimport { globalMiddlewareConfigForExpress } from '../middleware/index.js'\nimport auth from './auth/index.js'\nimport apis from './apis/index.js'\n\n\nconst router = express.Router()\nconst middleware = globalMiddlewareConfigForExpress()\n\nrouter.get('/', middleware, function (_req, res, _next) {\n  res.json('Hello world')\n})\n\nrouter.use('/auth', middleware, auth)\nrouter.use('/operations', middleware, operations)\n// NOTE: Keep user-defined api routes last so they cannot override our routes.\n// Additionally, do not add middleware to these routes here. Instead, we add\n// it later to allow for middleware customization.\nrouter.use(apis)\n\nexport default router\n","import express from 'express'\n\nimport { HttpError } from 'wasp/server'\nimport indexRouter from './routes/index.js'\n\n// TODO: Consider extracting most of this logic into createApp(routes, path) function so that\n//   it can be used in unit tests to test each route individually.\n\nconst app = express()\n\n// NOTE: Middleware are installed on a per-router or per-route basis.\n\napp.use('/', indexRouter)\n\n// Custom error handler.\napp.use((err, _req, res, next) => {\n  // As by expressjs documentation, when the headers have already\n  // been sent to the client, we must delegate to the default error handler.\n  if (res.headersSent) { return next(err) }\n\n  if (err instanceof HttpError) {\n    return res.status(err.statusCode).json({ message: err.message, data: err.data })\n  }\n\n  // This forwards the error to the default express error handler.\n  // As described by expressjs documentation, the default error handler sets response status\n  // to err.status or err.statusCode if it is 4xx or 5xx, and if not, sets it to 500.\n  // It won't add any more info to it if server is running in production, which is exactly what we want,\n  // we want to share as little info as possible when error happens in production, for security reasons,\n  // so they will get only status code if set, or 500 if not, no extra info.\n  // In development it will also share the error stack though, which is useful.\n  // If the user wants to put more information about the error into the response, they should use HttpError.\n  return next(err)\n})\n\nexport default app\n","const PLAUSIBLE_API_KEY = process.env.PLAUSIBLE_API_KEY!;\nconst PLAUSIBLE_SITE_ID = process.env.PLAUSIBLE_SITE_ID!;\nconst PLAUSIBLE_BASE_URL = process.env.PLAUSIBLE_BASE_URL;\n\nconst headers = {\n  'Content-Type': 'application/json',\n  Authorization: `Bearer ${PLAUSIBLE_API_KEY}`,\n};\n\ntype PageViewsResult = {\n  results: {\n    [key: string]: {\n      value: number;\n    };\n  };\n};\n\ntype PageViewSourcesResult = {\n  results: [\n    {\n      source: string;\n      visitors: number;\n    }\n  ];\n};\n\nexport async function getDailyPageViews() {\n  const totalViews = await getTotalPageViews();\n  const prevDayViewsChangePercent = await getPrevDayViewsChangePercent();\n\n  return {\n    totalViews,\n    prevDayViewsChangePercent,\n  };\n}\n\nasync function getTotalPageViews() {\n  const response = await fetch(\n    `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&metrics=pageviews`,\n    {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${PLAUSIBLE_API_KEY}`,\n      },\n    }\n  );\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const json = (await response.json()) as PageViewsResult;\n\n  return json.results.pageviews.value;\n}\n\nasync function getPrevDayViewsChangePercent() {\n  // Calculate today, yesterday, and the day before yesterday's dates\n  const today = new Date();\n  const yesterday = new Date(today.setDate(today.getDate() - 1)).toISOString().split('T')[0];\n  const dayBeforeYesterday = new Date(new Date().setDate(new Date().getDate() - 2)).toISOString().split('T')[0];\n\n  // Fetch page views for yesterday and the day before yesterday\n  const pageViewsYesterday = await getPageviewsForDate(yesterday);\n  const pageViewsDayBeforeYesterday = await getPageviewsForDate(dayBeforeYesterday);\n\n  console.table({\n    pageViewsYesterday,\n    pageViewsDayBeforeYesterday,\n    typeY: typeof pageViewsYesterday,\n    typeDBY: typeof pageViewsDayBeforeYesterday,\n  });\n\n  let change = 0;\n  if (pageViewsYesterday === 0 || pageViewsDayBeforeYesterday === 0) {\n    return '0';\n  } else {\n    change = ((pageViewsYesterday - pageViewsDayBeforeYesterday) / pageViewsDayBeforeYesterday) * 100;\n  }\n  return change.toFixed(0);\n}\n\nasync function getPageviewsForDate(date: string) {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/aggregate?site_id=${PLAUSIBLE_SITE_ID}&period=day&date=${date}&metrics=pageviews`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewsResult;\n  return data.results.pageviews.value;\n}\n\nexport async function getSources() {\n  const url = `${PLAUSIBLE_BASE_URL}/v1/stats/breakdown?site_id=${PLAUSIBLE_SITE_ID}&property=visit:source&metrics=visitors`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: headers,\n  });\n  if (!response.ok) {\n    throw new Error(`HTTP error! Status: ${response.status}`);\n  }\n  const data = (await response.json()) as PageViewSourcesResult;\n  return data.results;\n}\n","import { type DailyStats } from 'wasp/entities';\nimport { type DailyStatsJob } from 'wasp/server/jobs';\nimport Stripe from 'stripe';\nimport { stripe } from '../payment/stripe/stripeClient'\nimport { listOrders } from '@lemonsqueezy/lemonsqueezy.js';\nimport { getDailyPageViews, getSources } from './providers/plausibleAnalyticsUtils';\n// import { getDailyPageViews, getSources } from './providers/googleAnalyticsUtils;\nimport { paymentProcessor } from '../payment/paymentProcessor';\n\nexport type DailyStatsProps = { dailyStats?: DailyStats; weeklyStats?: DailyStats[]; isLoading?: boolean };\n\nexport const calculateDailyStats: DailyStatsJob<never, void> = async (_args, context) => {\n  const nowUTC = new Date(Date.now());\n  nowUTC.setUTCHours(0, 0, 0, 0);\n\n  const yesterdayUTC = new Date(nowUTC);\n  yesterdayUTC.setUTCDate(yesterdayUTC.getUTCDate() - 1);\n\n  try {\n    const yesterdaysStats = await context.entities.DailyStats.findFirst({\n      where: {\n        date: {\n          equals: yesterdayUTC,\n        },\n      },\n    });\n\n    const userCount = await context.entities.User.count({});\n    // users can have paid but canceled subscriptions which terminate at the end of the period\n    // we don't want to count those users as current paying users\n    const paidUserCount = await context.entities.User.count({\n      where: {\n        subscriptionStatus: 'active',\n      },\n    });\n\n    let userDelta = userCount;\n    let paidUserDelta = paidUserCount;\n    if (yesterdaysStats) {\n      userDelta -= yesterdaysStats.userCount;\n      paidUserDelta -= yesterdaysStats.paidUserCount;\n    }\n\n    let totalRevenue;\n    switch (paymentProcessor.id) {\n      case 'stripe':\n        totalRevenue = await fetchTotalStripeRevenue();\n        break;\n      case 'lemonsqueezy':\n        totalRevenue = await fetchTotalLemonSqueezyRevenue();\n        break;\n      default:\n        throw new Error(`Unsupported payment processor: ${paymentProcessor.id}`);\n    }\n\n    const { totalViews, prevDayViewsChangePercent } = await getDailyPageViews();\n\n    let dailyStats = await context.entities.DailyStats.findUnique({\n      where: {\n        date: nowUTC,\n      },\n    });\n\n    if (!dailyStats) {\n      console.log('No daily stat found for today, creating one...');\n      dailyStats = await context.entities.DailyStats.create({\n        data: {\n          date: nowUTC,\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    } else {\n      console.log('Daily stat found for today, updating it...');\n      dailyStats = await context.entities.DailyStats.update({\n        where: {\n          id: dailyStats.id,\n        },\n        data: {\n          totalViews,\n          prevDayViewsChangePercent,\n          userCount,\n          paidUserCount,\n          userDelta,\n          paidUserDelta,\n          totalRevenue,\n        },\n      });\n    }\n    const sources = await getSources();\n\n    for (const source of sources) {\n      let visitors = source.visitors;\n      if (typeof source.visitors !== 'number') {\n        visitors = parseInt(source.visitors);\n      }\n      await context.entities.PageViewSource.upsert({\n        where: {\n          date_name: {\n            date: nowUTC,\n            name: source.source,\n          },\n        },\n        create: {\n          date: nowUTC,\n          name: source.source,\n          visitors,\n          dailyStatsId: dailyStats.id,\n        },\n        update: {\n          visitors,\n        },\n      });\n    }\n\n    console.table({ dailyStats });\n  } catch (error: any) {\n    console.error('Error calculating daily stats: ', error);\n    await context.entities.Logs.create({\n      data: {\n        message: `Error calculating daily stats: ${error?.message}`,\n        level: 'job-error',\n      },\n    });\n  }\n};\n\nasync function fetchTotalStripeRevenue() {\n  let totalRevenue = 0;\n  let params: Stripe.BalanceTransactionListParams = {\n    limit: 100,\n    // created: {\n    //   gte: startTimestamp,\n    //   lt: endTimestamp\n    // },\n    type: 'charge',\n  };\n\n  let hasMore = true;\n  while (hasMore) {\n    const balanceTransactions = await stripe.balanceTransactions.list(params);\n\n    for (const transaction of balanceTransactions.data) {\n      if (transaction.type === 'charge') {\n        totalRevenue += transaction.amount;\n      }\n    }\n\n    if (balanceTransactions.has_more) {\n      // Set the starting point for the next iteration to the last object fetched\n      params.starting_after = balanceTransactions.data[balanceTransactions.data.length - 1].id;\n    } else {\n      hasMore = false;\n    }\n  }\n\n  // Revenue is in cents so we convert to dollars (or your main currency unit)\n  return totalRevenue / 100;\n}\n\nasync function fetchTotalLemonSqueezyRevenue() {\n  try {\n    let totalRevenue = 0;\n    let hasNextPage = true;\n    let currentPage = 1;\n\n    while (hasNextPage) {\n      const { data: response } = await listOrders({\n        filter: {\n          storeId: process.env.LEMONSQUEEZY_STORE_ID,\n        },\n        page: {\n          number: currentPage,\n          size: 100,\n        },\n      });\n\n      if (response?.data) {\n        for (const order of response.data) {\n          totalRevenue += order.attributes.total;\n        }\n      }\n\n      hasNextPage = !response?.meta?.page.lastPage;\n      currentPage++;\n    }\n\n    // Revenue is in cents so we convert to dollars (or your main currency unit)\n    return totalRevenue / 100;\n  } catch (error) {\n    console.error('Error fetching Lemon Squeezy revenue:', error);\n    throw error;\n  }\n}","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { calculateDailyStats } from '../../../../../src/analytics/stats'\nimport { dailyStatsJob as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: calculateDailyStats,\n})\n","import { type SendNewsletter } from 'wasp/server/jobs';\n\nimport { type User } from 'wasp/entities';\nimport { emailSender } from 'wasp/server/email';\nimport { type Email } from 'wasp/server/email/core/types'; // TODO fix after it gets fixed in wasp :)\n\nconst emailToSend: Email = {\n  to: '',\n  subject: 'The SaaS App Newsletter',\n  text: 'Hey There! \\n\\nThis is just a newsletter that sends automatically via cron jobs',\n  html: `<html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <title>SaaS App Newsletter</title>\n          </head>\n          <body>\n            <p>Hey There!</p>\n            \n            <p>This is just a newsletter that sends automatically via cron jobs</p>\n          </body>\n        </html>`,\n};\n\n//  you could use this function to send newsletters, expiration notices, etc.\nexport const checkAndQueueNewsletterEmails: SendNewsletter<never, void> = async (_args, context) => {\n  // e.g. you could send an offer email 2 weeks before their subscription expires\n  const currentDate = new Date();\n  const twoWeeksFromNow = new Date(currentDate.getTime() + 14 * 24 * 60 * 60 * 1000);\n\n  const users = (await context.entities.User.findMany({\n    where: {\n      datePaid: {\n        equals: twoWeeksFromNow,\n      },\n      sendNewsletter: true,\n    },\n  })) as User[];\n\n  if (users.length === 0) {\n    return;\n  }\n  await Promise.allSettled(\n    users.map(async (user) => {\n      if (user.email) {\n        try {\n          emailToSend.to = user.email;\n          await emailSender.send(emailToSend);\n        } catch (error) {\n          console.error('Error sending notice to user: ', user.id, error);\n        }\n      }\n    })\n  );\n};\n","import { registerJob } from 'wasp/server/jobs/core/pgBoss'\nimport { checkAndQueueNewsletterEmails } from '../../../../../src/newsletter/sendNewsletter'\nimport { sendNewsletter as _waspJobDefinition } from 'wasp/server/jobs'\n\nregisterJob({\n  job: _waspJobDefinition,\n  jobFn: checkAndQueueNewsletterEmails,\n})\n","// This is a polyfill for Node.js 18 webcrypto API so Lucia can use it\n// for random number generation.\n\nimport { webcrypto } from \"node:crypto\";\n\n// NOTE: node < 19 doesn't have Crypto API, which we need for Lucia, so we apply the polyfill if Crypto API is not defined.\nif (typeof globalThis.crypto === \"undefined\") {\n  // @ts-ignore\n  globalThis.crypto = webcrypto as Crypto;\n}\n\n","import http from 'http'\n\nimport app from './app.js'\nimport { config } from 'wasp/server'\n\n\nimport { startPgBoss } from 'wasp/server/jobs/core/pgBoss'\nimport './jobs/core/allJobs.js'\n\n\nimport './polyfill.js'\n\nconst startServer = async () => {\n  await startPgBoss()\n\n  const port = normalizePort(config.port)\n  app.set('port', port)\n\n  const server = http.createServer(app)\n\n\n\n  server.listen(port)\n\n  server.on('error', (error: NodeJS.ErrnoException) => {\n    if (error.syscall !== 'listen') throw error\n    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port\n    // handle specific listen errors with friendly messages\n    switch (error.code) {\n    case 'EACCES':\n      console.error(bind + ' requires elevated privileges')\n      process.exit(1)\n    case 'EADDRINUSE':\n      console.error(bind + ' is already in use')\n      process.exit(1)\n    default:\n      throw error\n    }\n  })\n\n  server.on('listening', () => {\n    const addr = server.address()\n    const bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port\n    console.log('Server listening on ' + bind)\n  })\n}\n\nstartServer().catch(e => console.error(e))\n\n/**\n * Normalize a port into a number, string, or false.\n */\nfunction normalizePort (val) {\n  const port = parseInt(val, 10)\n  if (isNaN(port)) return val // named pipe\n  if (port >= 0) return port // port number\n  return false\n}\n"],"names":["superjsonDeserialize","superjsonSerialize","updateUserById","updateCurrentUser","getPaginatedUsers","generateGptResponse","createTask","updateTask","deleteTask","getGptResponses","getAllTasksByUser","PaymentPlanId","planId","generateCheckoutSession","getCustomerPortalUrl","createFile","getAllFilesByUser","getDownloadFileSignedURL","getDailyStats","router","config","ensureValidArgs","onAfterSignupHook_ext","email","providersRouter","_wasppaymentsWebhookmiddlewareConfigFn","_wasppaymentsWebhookfn","auth","operations","apis","indexRouter","_waspJobDefinition"],"mappings":"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"}