{"version":3,"file":"dbSeed.js","sources":["../../../../src/server/utils.ts","../../../../src/payment/plans.ts","../../../../src/server/scripts/dbSeeds.ts","../src/dbSeed.ts"],"sourcesContent":["export function requireNodeEnvVar(name: string): string {\n  const value = process.env[name];\n  if (value === undefined) {\n    throw new Error(`Env var ${name} is undefined`);\n  } else {\n    return value;\n  }\n}\n","import { requireNodeEnvVar } from '../server/utils';\n\nexport type SubscriptionStatus = 'past_due' | 'cancel_at_period_end' | 'active' | 'deleted';\n\nexport enum PaymentPlanId {\n  Hobby = 'hobby',\n  Pro = 'pro',\n  Credits10 = 'credits10',\n}\n\nexport interface PaymentPlan {\n  // Returns the id under which this payment plan is identified on your payment processor. \n  // E.g. this might be price id on Stripe, or variant id on LemonSqueezy.\n  getPaymentProcessorPlanId: () => string;\n  effect: PaymentPlanEffect;\n}\n\nexport type PaymentPlanEffect = { kind: 'subscription' } | { kind: 'credits'; amount: number };\n\nexport const paymentPlans: Record<PaymentPlanId, PaymentPlan> = {\n  [PaymentPlanId.Hobby]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_HOBBY_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Pro]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_PRO_SUBSCRIPTION_PLAN_ID'),\n    effect: { kind: 'subscription' },\n  },\n  [PaymentPlanId.Credits10]: {\n    getPaymentProcessorPlanId: () => requireNodeEnvVar('PAYMENTS_CREDITS_10_PLAN_ID'),\n    effect: { kind: 'credits', amount: 10 },\n  },\n};\n\nexport function prettyPaymentPlanName(planId: PaymentPlanId): string {\n  const planToName: Record<PaymentPlanId, string> = {\n    [PaymentPlanId.Hobby]: 'Hobby',\n    [PaymentPlanId.Pro]: 'Pro',\n    [PaymentPlanId.Credits10]: '10 Credits',\n  };\n  return planToName[planId];\n}\n\nexport function parsePaymentPlanId(planId: string): PaymentPlanId {\n  if ((Object.values(PaymentPlanId) as string[]).includes(planId)) {\n    return planId as PaymentPlanId;\n  } else {\n    throw new Error(`Invalid PaymentPlanId: ${planId}`);\n  }\n}\n\nexport function getSubscriptionPaymentPlanIds(): PaymentPlanId[] {\n  return Object.values(PaymentPlanId).filter((planId) => paymentPlans[planId].effect.kind === 'subscription');\n}\n","import { type User } from 'wasp/entities';\nimport { faker } from '@faker-js/faker';\nimport type { PrismaClient } from '@prisma/client';\nimport { getSubscriptionPaymentPlanIds, type SubscriptionStatus } from '../../payment/plans';\n\ntype MockUserData = Omit<User, 'id'>;\n\n/**\n * This function, which we've imported in `app.db.seeds` in the `main.wasp` file,\n * seeds the database with mock users via the `wasp db seed` command.\n * For more info see: https://wasp-lang.dev/docs/data-model/backends#seeding-the-database\n */\nexport async function seedMockUsers(prismaClient: PrismaClient) {\n  await Promise.all(generateMockUsersData(50).map((data) => \n    prismaClient.user.create({ data }))\n  );\n}\n\nfunction generateMockUsersData(numOfUsers: number): MockUserData[] {\n  return faker.helpers.multiple(generateMockUserData, { count: numOfUsers });\n}\n\nfunction generateMockUserData(): MockUserData {\n  const firstName = faker.person.firstName();\n  const lastName = faker.person.lastName();\n  const subscriptionStatus = faker.helpers.arrayElement<SubscriptionStatus | null>(['active', 'cancel_at_period_end', 'past_due', 'deleted', null]);\n  const now = new Date();\n  const createdAt = faker.date.past({ refDate: now });\n  const lastActiveTimestamp = faker.date.between({ from: createdAt, to: now });\n  const credits = subscriptionStatus ? 0 : faker.number.int({ min: 0, max: 10 });\n  const hasUserPaidOnStripe = !!subscriptionStatus || credits > 3 \n  return {\n    email: faker.internet.email({ firstName, lastName }),\n    username: faker.internet.userName({ firstName, lastName }),\n    createdAt,\n    lastActiveTimestamp,\n    isAdmin: false,\n    sendNewsletter: false,\n    credits,\n    subscriptionStatus,\n    lemonSqueezyCustomerPortalUrl: null,\n    paymentProcessorUserId: hasUserPaidOnStripe ? `cus_test_${faker.string.uuid()}` : null,\n    datePaid: hasUserPaidOnStripe ? faker.date.between({ from: createdAt, to: lastActiveTimestamp }) : null,\n    checkoutSessionId: hasUserPaidOnStripe ? `cs_test_${faker.string.uuid()}` : null,\n    subscriptionPlan: subscriptionStatus ? faker.helpers.arrayElement(getSubscriptionPaymentPlanIds()) : null,\n  };\n}\n","\n// This is a script that is used to seed the database. It is present here in the server project in\n// order to have easy access to the server logic, like operations and the rest, since we often want\n// to use that logic in our seeding.\n// TODO: Consider in the future moving it into a a separate project (maybe db/ ?), while still\n//   maintaining access to logic from the server/ .\n\nimport { prisma, DbSeedFn } from 'wasp/server'\n\nimport { seedMockUsers } from '../../../../src/server/scripts/dbSeeds'\n\nconst seeds = {\n  seedMockUsers,\n}\n\nasync function main() {\n  const nameOfSeedToRun = process.env.WASP_DB_SEED_NAME\n  if (nameOfSeedToRun) {\n    console.log(`Running seed: ${nameOfSeedToRun}`)\n  } else {\n    console.error('Name of the seed to run not specified!')\n  }\n  await (seeds[nameOfSeedToRun] satisfies DbSeedFn)(prisma)\n}\n\nmain()\n  .then(async () => { await prisma.$disconnect() })\n  .catch(async (e) => {\n    console.error(e)\n    await prisma.$disconnect()\n    process.exit(1)\n  })\n"],"names":["PaymentPlanId"],"mappings":"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"}